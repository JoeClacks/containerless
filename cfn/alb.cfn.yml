Resources:
  ELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ecs-elb
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: 30
      Subnets:
        - Fn::ImportValue:
            Fn::Sub:
              "${NetworkStackName}-PublicSubnetAz1"
        - Fn::ImportValue:
            Fn::Sub:
              "${NetworkStackName}-PublicSubnetAz2"
      SecurityGroups:
        - Ref: PublicSecurityGroup
  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ELBServiceRole
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: ELBTargetGroup
      LoadBalancerArn:
        Ref: ELB
      Port: '80'
      Protocol: HTTP
  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ELB
    Properties:
      Name: ELBTargetGroup
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-VpcID"
  ELBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: ELBListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: ELBTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn:
        Ref:
          ELBListener
      Priority: 1
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Public Security Group
      VpcId:
        Ref: VPCId
  PublicSecurityGroupDynamicPorts:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: PublicSecurityGroup
      IpProtocol: tcp
      FromPort: 31000
      ToPort: 61000
      SourceSecurityGroupId:
        Ref: PublicSecurityGroup
  PublicSecurityGroupHTTPInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: PublicSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
  PublicSecurityGroupHTTPSInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: PublicSecurityGroup
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 0.0.0.0/0
