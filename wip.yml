AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  # KeyName:
  #   Type: AWS::EC2::KeyPair::KeyName
  #   Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.
    Default: vpc-7a93541e
  SubnetID:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at least two subnets in your selected VPC.
    Default: "subnet-12359e64,subnet-b442c0d0"
  NetworkStackName:
    Type: String
    Description: Name of the stack containing a VPC with at least two subnets
    Default: triple-az-vpc
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '1'
    Description: Maximum number of instances that can be launched in your ECS cluster.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small]
    ConstraintDescription: Please choose a valid instance type.
Mappings:
  AWSRegionToAMI:
    # ECS Optimzied AMIs http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    # Marketplace: https://aws.amazon.com/marketplace/pp/B00U6QTYI2?ref=cns_srchrow
    ap-southeast-2:
      AMIID: ami-774b7314
Resources:
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-VpcID"
  EcsSecurityGroupHttp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
  EcsSecurityGroupHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 0.0.0.0/0
  EcsSecurityGroupSsh:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 0.0.0.0/0
  EcsCluster:
    Type: AWS::ECS::Cluster
  EcsService:
    Type: AWS::ECS::Service
    # DependsOn: ALBListener
    Properties:
      Cluster: !Ref 'EcsCluster'
      DesiredCount: '1'
      LoadBalancers:
      - ContainerName: simple-app
        ContainerPort: '80'
        TargetGroupArn: !Ref 'ECSTG'
      Role: !Ref 'EcsServiceRole'
      TaskDefinition: !Ref 'taskdefinition'
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-PublicSubnetAz1"
      LaunchConfigurationName: !Ref 'LaunchConfiguration'
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      SecurityGroups: [!Ref 'EcsSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      KeyName: ecs-instance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EcsInstanceRole']
  EcsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Resource: '*'
            Action: [ 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer',
                      'elasticloadbalancing:DeregisterTargets',
                      'elasticloadbalancing:Describe*',
                      'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
                      'elasticloadbalancing:RegisterTargets',
                      'ec2:Describe*',
                      'ec2:AuthorizeSecurityGroupIngress']
  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Resource: '*'
            Action: [ 'ecs:CreateCluster',
                      'ecs:DeregisterContainerInstance',
                      'ecs:DiscoverPollEndpoint',
                      'ecs:Poll',
                      'ecs:RegisterContainerInstance',
                      'ecs:StartTelemetrySession',
                      'ecs:Submit*',
                      'logs:CreateLogStream',
                      'logs:PutLogEvents']
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Resource: '*'
            Action: [
              'application-autoscaling:*',
              'cloudwatch:DescribeAlarms',
              'cloudwatch:PutMetricAlarm',
              'ecs:DescribeServices',
              'ecs:UpdateService'
            ]
