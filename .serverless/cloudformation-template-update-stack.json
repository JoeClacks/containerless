{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "Hello1ListenerRule": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "DependsOn": [
        "ContainerlessListener",
        "Hello1TargetGroup"
      ],
      "Properties": {
        "Actions": [
          {
            "TargetGroupArn": {
              "Ref": "Hello1TargetGroup"
            },
            "Type": "forward"
          }
        ],
        "Conditions": [
          {
            "Field": "path-pattern",
            "Values": [
              "/"
            ]
          }
        ],
        "ListenerArn": {
          "Ref": "ContainerlessListener"
        },
        "Priority": 1
      }
    },
    "Hello1TargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "Hello1TargetGroup",
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPath": "/",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 2,
        "Port": 80,
        "Protocol": "HTTP",
        "UnhealthyThresholdCount": 2,
        "VpcId": {
          "Fn::ImportValue": "triple-az-vpc-VpcID"
        }
      }
    },
    "Hello1": {
      "Type": "AWS::ECS::Service",
      "DependsOn": [
        "ContainerlessListener",
        "Hello1TaskDefinition"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "ContainerlessCluster"
        },
        "DesiredCount": 1,
        "TaskDefinition": {
          "Ref": "Hello1TaskDefinition"
        },
        "LoadBalancers": [
          {
            "ContainerName": "Hello1",
            "ContainerPort": 3000,
            "TargetGroupArn": {
              "Ref": "Hello1TargetGroup"
            }
          }
        ],
        "Role": {
          "Ref": "ContainerlessELBRole"
        }
      }
    },
    "Hello1TaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": "Hello1",
        "ContainerDefinitions": [
          {
            "Name": "Hello1",
            "Essential": "true",
            "Image": "005213230316.dkr.ecr.ap-southeast-2.amazonaws.com/serverlecs:hello-1-1483491593",
            "Memory": 128,
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "Hello1CloudwatchLogGroup"
                },
                "awslogs-region": {
                  "Ref": "AWS::Region"
                },
                "awslogs-stream-prefix": {
                  "Ref": "AWS::StackName"
                }
              }
            },
            "PortMappings": [
              {
                "ContainerPort": 3000
              }
            ]
          }
        ]
      }
    },
    "Hello1CloudwatchLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "Hello1-${AWS::StackName}"
        },
        "RetentionInDays": 7
      }
    },
    "Hello2ListenerRule": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "DependsOn": [
        "ContainerlessListener",
        "Hello2TargetGroup"
      ],
      "Properties": {
        "Actions": [
          {
            "TargetGroupArn": {
              "Ref": "Hello2TargetGroup"
            },
            "Type": "forward"
          }
        ],
        "Conditions": [
          {
            "Field": "path-pattern",
            "Values": [
              "/hello"
            ]
          }
        ],
        "ListenerArn": {
          "Ref": "ContainerlessListener"
        },
        "Priority": 2
      }
    },
    "Hello2TargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "Hello2TargetGroup",
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPath": "/",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 2,
        "Port": 80,
        "Protocol": "HTTP",
        "UnhealthyThresholdCount": 2,
        "VpcId": {
          "Fn::ImportValue": "triple-az-vpc-VpcID"
        }
      }
    },
    "Hello2": {
      "Type": "AWS::ECS::Service",
      "DependsOn": [
        "ContainerlessListener",
        "Hello2TaskDefinition"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "ContainerlessCluster"
        },
        "DesiredCount": 1,
        "TaskDefinition": {
          "Ref": "Hello2TaskDefinition"
        },
        "LoadBalancers": [
          {
            "ContainerName": "Hello2",
            "ContainerPort": 3000,
            "TargetGroupArn": {
              "Ref": "Hello2TargetGroup"
            }
          }
        ],
        "Role": {
          "Ref": "ContainerlessELBRole"
        }
      }
    },
    "Hello2TaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": "Hello2",
        "ContainerDefinitions": [
          {
            "Name": "Hello2",
            "Essential": "true",
            "Image": "005213230316.dkr.ecr.ap-southeast-2.amazonaws.com/serverlecs:hello-2-1483491593",
            "Memory": 128,
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "Hello2CloudwatchLogGroup"
                },
                "awslogs-region": {
                  "Ref": "AWS::Region"
                },
                "awslogs-stream-prefix": {
                  "Ref": "AWS::StackName"
                }
              }
            },
            "PortMappings": [
              {
                "ContainerPort": 3000
              }
            ]
          }
        ]
      }
    },
    "Hello2CloudwatchLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "Hello2-${AWS::StackName}"
        },
        "RetentionInDays": 7
      }
    },
    "Hello3": {
      "Type": "AWS::ECS::Service",
      "DependsOn": [
        "ContainerlessListener",
        "Hello3TaskDefinition"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "ContainerlessCluster"
        },
        "DesiredCount": 1,
        "TaskDefinition": {
          "Ref": "Hello3TaskDefinition"
        },
        "LoadBalancers": []
      }
    },
    "Hello3TaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": "Hello3",
        "ContainerDefinitions": [
          {
            "Name": "Hello3",
            "Essential": "true",
            "Image": "005213230316.dkr.ecr.ap-southeast-2.amazonaws.com/serverlecs:hello-3-1483491593",
            "Memory": 128,
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "Hello3CloudwatchLogGroup"
                },
                "awslogs-region": {
                  "Ref": "AWS::Region"
                },
                "awslogs-stream-prefix": {
                  "Ref": "AWS::StackName"
                }
              }
            }
          }
        ]
      }
    },
    "Hello3CloudwatchLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "Hello3-${AWS::StackName}"
        },
        "RetentionInDays": 7
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT5M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingReplacingUpdate": {
          "PauseTime": "PT5M",
          "WillReplace": "true"
        }
      },
      "Properties": {
        "DesiredCapacity": 1,
        "LaunchConfigurationName": {
          "Ref": "ContainerlessLaunchConfiguration"
        },
        "MaxSize": 1,
        "MinSize": "1",
        "VPCZoneIdentifier": [
          {
            "Fn::ImportValue": "triple-az-vpc-PublicSubnetAz1"
          },
          {
            "Fn::ImportValue": "triple-az-vpc-PublicSubnetAz2"
          },
          {
            "Fn::ImportValue": "triple-az-vpc-PublicSubnetAz3"
          }
        ]
      }
    },
    "ContainerlessInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "ContainerlessInstanceRole"
          }
        ]
      }
    },
    "ContainerlessCluster": {
      "Type": "AWS::ECS::Cluster",
      "DependsOn": "ContainerlessELBRole"
    },
    "ContainerlessLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn": [
        "ContainerlessInstanceProfile",
        "ContainerlessSecurityGroup"
      ],
      "Properties": {
        "AssociatePublicIpAddress": true,
        "IamInstanceProfile": {
          "Ref": "ContainerlessInstanceProfile"
        },
        "ImageId": "ami-774b7314",
        "InstanceType": "t2.micro",
        "KeyName": "ecs-instance",
        "SecurityGroups": [
          {
            "Ref": "ContainerlessSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Sub": "#!/bin/bash -xe\nyum install -y aws-cfn-bootstrap\n\n#!/bin/bash -xe\necho ECS_CLUSTER=${ContainerlessCluster} >> /etc/ecs/ecs.config\n\n# /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ECSAutoScalingLaunchConfig --region ${AWS::Region}\n\n/opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}\n"
          }
        }
      }
    },
    "ContainerlessInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:Submit*",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:BatchGetImage",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetAuthorizationToken",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            },
            "PolicyName": "ecs-service-instance"
          }
        ]
      }
    },
    "ContainerlessSecurityGroup": {
      "Properties": {
        "GroupDescription": "ECS Public Security Group",
        "VpcId": {
          "Fn::ImportValue": "triple-az-vpc-VpcID"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "ContainerlessSecurityGroupDynamicPorts": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 31000,
        "GroupId": {
          "Ref": "ContainerlessSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "ContainerlessSecurityGroup"
        },
        "ToPort": 61000
      }
    },
    "ContainerlessSecurityGroupHTTP": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": "0.0.0.0/0",
        "FromPort": "80",
        "GroupId": {
          "Ref": "ContainerlessSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": "80"
      }
    },
    "ContainerlessSecurityGroupHTTPS": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": "0.0.0.0/0",
        "FromPort": "443",
        "GroupId": {
          "Ref": "ContainerlessSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": "443"
      }
    },
    "ContainerlessELBRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "elb-role-policy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": [
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:DeregisterTargets",
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "elasticloadbalancing:RegisterTargets",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "ContainerlessELB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Scheme": "internet-facing",
        "LoadBalancerAttributes": [
          {
            "Key": "idle_timeout.timeout_seconds",
            "Value": 30
          }
        ],
        "Subnets": [
          {
            "Fn::ImportValue": "triple-az-vpc-PublicSubnetAz1"
          },
          {
            "Fn::ImportValue": "triple-az-vpc-PublicSubnetAz2"
          },
          {
            "Fn::ImportValue": "triple-az-vpc-PublicSubnetAz3"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "ContainerlessSecurityGroup"
          }
        ]
      }
    },
    "ContainerlessListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "DependsOn": "ContainerlessELB",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "ContainerlessDefaultTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "ContainerlessELB"
        },
        "Port": "80",
        "Protocol": "HTTP"
      }
    },
    "ContainerlessDefaultTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "DependsOn": "ContainerlessELB",
      "Properties": {
        "Port": 80,
        "Protocol": "HTTP",
        "VpcId": {
          "Fn::ImportValue": "triple-az-vpc-VpcID"
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    }
  }
}