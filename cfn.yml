AWSTemplateFormatVersion: 2010-09-09
Description: Test Docker deployment
Mappings:
  AWSRegionToAMI:
    ap-southeast-2:
      AMIID: ami-774b7314
Parameters:
  DesiredCapacity:
    Default: 1
    Description: Number of instances to launch in your ECS cluster.
    Type: Number
  InstanceType:
    AllowedValues:
    - t2.micro
    - t2.small
    ConstraintDescription: Please choose a valid instance type.
    Default: t2.micro
    Description: EC2 instance type
    Type: String
  MaxSize:
    Default: 1
    Description: Maximum number of instances that can be launched in your ECS cluster.
    Type: Number
  NetworkStackName:
    Default: triple-az-vpc
    Description: Name of the stack containing a VPC with at least two subnets
    Type: String
Resources:
  AutoScalingGroup:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Properties:
      DesiredCapacity:
        Ref: DesiredCapacity
      LaunchConfigurationName:
        Ref: LaunchConfiguration
      MaxSize:
        Ref: MaxSize
      MinSize: "1"
      VPCZoneIdentifier:
      - Fn::ImportValue:
          Fn::Sub: ${NetworkStackName}-PublicSubnetAz1
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: "true"
  AutoscalingRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - application-autoscaling.amazonaws.com
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - application-autoscaling:*
            - cloudwatch:DescribeAlarms
            - cloudwatch:PutMetricAlarm
            - ecs:DescribeServices
            - ecs:UpdateService
            Effect: Allow
            Resource: '*'
        PolicyName: ecs-service-autoscaling
    Type: AWS::IAM::Role
  CloudwatchLogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: serverlecs-${AWS::StackName}
      RetentionInDays: 14
    Type: AWS::Logs::LogGroup
  EC2InstanceProfile:
    Properties:
      Path: /
      Roles:
      - Ref: ECSInstanceRole
    Type: AWS::IAM::InstanceProfile
  ECSCluster:
    Type: AWS::ECS::Cluster
  ECSInstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ecs:CreateCluster
            - ecs:DeregisterContainerInstance
            - ecs:DiscoverPollEndpoint
            - ecs:Poll
            - ecs:RegisterContainerInstance
            - ecs:StartTelemetrySession
            - ecs:Submit*
            - ecr:BatchCheckLayerAvailability
            - ecr:BatchGetImage
            - ecr:GetDownloadUrlForLayer
            - ecr:GetAuthorizationToken
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
        PolicyName: ecs-service-instance
    Type: AWS::IAM::Role
  ECSService:
    DependsOn: ELBListener
    Properties:
      Cluster:
        Ref: ECSCluster
      DesiredCount: "1"
      LoadBalancers:
      - ContainerName: task-01
        ContainerPort: 3000
        TargetGroupArn:
          Ref: ELBTargetGroup
      Role:
        Ref: ELBServiceRole
      TaskDefinition:
        Ref: TaskDefinition
    Type: AWS::ECS::Service
  ELB:
    Properties:
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: 30
      Name: ecs-elb
      Scheme: internet-facing
      SecurityGroups:
      - Ref: PublicSecurityGroup
      Subnets:
      - Fn::ImportValue:
          Fn::Sub: ${NetworkStackName}-PublicSubnetAz1
      - Fn::ImportValue:
          Fn::Sub: ${NetworkStackName}-PublicSubnetAz2
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  ELBListener:
    DependsOn: ELBServiceRole
    Properties:
      DefaultActions:
      - TargetGroupArn:
          Ref: ELBTargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: ELB
      Port: "80"
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  ELBListenerRule:
    DependsOn: ELBListener
    Properties:
      Actions:
      - TargetGroupArn:
          Ref: ELBTargetGroup
        Type: forward
      Conditions:
      - Field: path-pattern
        Values:
        - /
      ListenerArn:
        Ref: ELBListener
      Priority: 1
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
  ELBServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:DeregisterTargets
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - elasticloadbalancing:RegisterTargets
            - ec2:Describe*
            - ec2:AuthorizeSecurityGroupIngress
            Effect: Allow
            Resource: '*'
        PolicyName: ecs-service
    Type: AWS::IAM::Role
  ELBTargetGroup:
    DependsOn: ELB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: ELBTargetGroup
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${NetworkStackName}-VpcID
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  LaunchConfiguration:
    Properties:
      IamInstanceProfile:
        Ref: EC2InstanceProfile
      ImageId:
        Fn::FindInMap:
        - AWSRegionToAMI
        - Ref: AWS::Region
        - AMIID
      InstanceType:
        Ref: InstanceType
      KeyName: ecs-instance
      SecurityGroups:
      - Ref: PublicSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe
            yum install -y aws-cfn-bootstrap

            #!/bin/bash -xe
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config

            # /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ECSAutoScalingLaunchConfig --region ${AWS::Region}

            /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
    Type: AWS::AutoScaling::LaunchConfiguration
  PublicSecurityGroup:
    Properties:
      GroupDescription: ECS Public Security Group
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${NetworkStackName}-VpcID
    Type: AWS::EC2::SecurityGroup
  PublicSecurityGroupDynamicPorts:
    Properties:
      FromPort: 31000
      GroupId:
        Ref: PublicSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: PublicSecurityGroup
      ToPort: 61000
    Type: AWS::EC2::SecurityGroupIngress
  PublicSecurityGroupHTTPInbound:
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: "80"
      GroupId:
        Ref: PublicSecurityGroup
      IpProtocol: tcp
      ToPort: "80"
    Type: AWS::EC2::SecurityGroupIngress
  PublicSecurityGroupHTTPSInbound:
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: "443"
      GroupId:
        Ref: PublicSecurityGroup
      IpProtocol: tcp
      ToPort: "443"
    Type: AWS::EC2::SecurityGroupIngress
  PublicSecurityGroupSSHInbound:
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: "22"
      GroupId:
        Ref: PublicSecurityGroup
      IpProtocol: tcp
      ToPort: "22"
    Type: AWS::EC2::SecurityGroupIngress
  ServiceScalableTarget:
    DependsOn: ECSService
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId:
        Fn::Sub:
        - service/${ECSCluster}/${ECSServiceName}
        - ECSServiceName:
            Fn::GetAtt:
            - ECSService
            - Name
      RoleARN:
        Fn::GetAtt:
        - AutoscalingRole
        - Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    Type: AWS::ApplicationAutoScaling::ScalableTarget
  ServiceScalingPolicy:
    DependsOn: ServiceScalableTarget
    Properties:
      PolicyName: ecs-service-step-scaling-policy
      PolicyType: StepScaling
      ScalingTargetId:
        Ref: ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 200
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
  TaskDefinition:
    Properties:
      ContainerDefinitions:
      - Essential: "true"
        Image: 005213230316.dkr.ecr.ap-southeast-2.amazonaws.com/serverlecs:latest
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: CloudwatchLogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix:
              Ref: AWS::StackName
        Memory: 128
        Name: task-01
        PortMappings:
        - ContainerPort: 3000
      Family:
        Fn::Sub: ${AWS::StackName}-task-01
    Type: AWS::ECS::TaskDefinition

